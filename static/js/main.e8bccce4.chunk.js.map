{"version":3,"sources":["utils.js","SingleColor.js","App.js","index.js"],"names":["componentToHex","c","hex","toString","length","rgbToHex","r","g","b","SingleColor","rgb","weight","useState","alert","setAlert","bcg","join","useEffect","timeout","setTimeout","clearTimeout","className","parseInt","replace","style","backgroundColor","onClick","navigator","clipboard","writeText","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","App","subtitle","color","setColor","shadesCount","setShadesCount","error","setError","Values","all","list","setList","React","modalIsOpen","setIsOpen","closeModal","isOpen","onAfterOpen","onRequestClose","contentLabel","ref","_subtitle","onSubmit","e","preventDefault","console","log","colors","type","value","onChange","target","placeholder","map","shade","index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8bccce4.chunk.js","sourcesContent":["function componentToHex(c) {\r\n  var hex = c.toString(16);\r\n  return hex.length === 1 ? '0' + hex : hex;\r\n}\r\n\r\nfunction rgbToHex(r, g, b) {\r\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nexport default rgbToHex;\r\n","import React, { useState, useEffect } from 'react';\r\nimport rgbToHex from './utils';\r\n\r\nconst SingleColor = ({ rgb, weight}) => {\r\n  const [alert, setAlert] = useState(false);\r\n  const bcg = rgb.join(',');\r\n  const hex = rgbToHex(...rgb);\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setAlert(false);\r\n    }, 3000);\r\n    return () => clearTimeout(timeout);\r\n  }, [alert]);\r\n  return (\r\n    <article\r\n      className={`color ${parseInt(hex.replace('#', ''), 16) <= parseInt(\"aaaaaa\", 16) && 'color-light'}`}\r\n      style={{ backgroundColor: `rgb(${bcg})` }}\r\n      onClick={() => {\r\n        setAlert(true);\r\n        navigator.clipboard.writeText(hex);\r\n      }}\r\n    >\r\n      <p className='percent-value'>{weight}%</p>\r\n      <p className='color-value'>{hex}</p>\r\n      {alert && <p className='alert'>copied to clipboard</p>}\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default SingleColor;\r\n","import React, { useState } from 'react';\r\nimport SingleColor from './SingleColor';\r\nimport Modal from 'react-modal';\r\nimport { FaInfoCircle, FaRegWindowClose } from 'react-icons/fa'\r\nimport Values from 'values.js';\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)'\r\n  }\r\n};\r\nModal.setAppElement('#root')\r\n\r\nfunction App() {\r\n  const [color, setColor] = useState('');\r\n  const [shadesCount, setShadesCount] = useState(10);\r\n  const [error, setError] = useState(false);\r\n  const [list, setList] = useState(new Values('#f15025').all(shadesCount));\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      console.log(shadesCount)\r\n      let colors = new Values(color).all(shadesCount);\r\n      setList(colors);\r\n      setError(false);\r\n    } catch (error) {\r\n      setError(true);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  var subtitle;\r\n  const [modalIsOpen,setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n \r\n  function afterOpenModal() {\r\n    // references are now sync'd and can be accessed.\r\n    subtitle.style.color = '#f15025';\r\n  }\r\n \r\n  function closeModal(){\r\n    setIsOpen(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onAfterOpen={afterOpenModal}\r\n        onRequestClose={closeModal}\r\n        style={customStyles}\r\n        contentLabel=\"Info Modal\"\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h2 ref={_subtitle => (subtitle = _subtitle)}>How to use Shades Generator</h2>\r\n          <button className=\"fa-icon\">\r\n            <FaRegWindowClose onClick={closeModal}>close</FaRegWindowClose>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <p>Choose a color code hex whose shades you want and choose the number of shades you want to generate.</p> \r\n          <p>If you have choden <strong>N</strong> number of shades, then this Shades Generator would generate <strong>N/2</strong> shades which are lighter than your chosen shade, the color you have chosen (at 0%) and <strong>N/2</strong> shades which are darker.</p>\r\n          <p>Default vaule for color is <strong>#f15025</strong> and default number of shades is <strong>20</strong>.</p>\r\n        </div>\r\n      </Modal>\r\n      <section className='container'>\r\n        <div className=\"container-form\">\r\n          <h3>Shades Generator</h3>\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              type = 'text'\r\n              value = {color}\r\n              onChange = {(e) => setColor(e.target.value)}\r\n              placeholder = 'Color Code (#f15025)'\r\n              className = {`${error ? 'error' : null}`}\r\n            />\r\n            <input\r\n              type = 'number'\r\n              placeholder = 'Number of Shades (20)'\r\n              onChange = {(e) => setShadesCount(e.target.value ? 200 / e.target.value : 10)}\r\n              className = {`${error ? 'error' : null}`}\r\n            />\r\n            <button type='submit' className='btn'>\r\n              submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n        <div className=\"container-info\">\r\n          <button className=\"fa-icon\">\r\n            <FaInfoCircle onClick={openModal}>\r\n            </FaInfoCircle>\r\n          </button>\r\n        </div>\r\n      </section>\r\n      <section className='colors'>\r\n        {list.map((shade, index) => {\r\n          return <SingleColor key = {index} {...shade} />;\r\n        })}\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}